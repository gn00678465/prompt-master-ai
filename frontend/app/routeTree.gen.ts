/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TemplatesIndexImport } from './routes/templates/index'
import { Route as PromptIndexImport } from './routes/prompt/index'
import { Route as HistoryIndexImport } from './routes/history/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TemplatesIndexRoute = TemplatesIndexImport.update({
  id: '/templates/',
  path: '/templates/',
  getParentRoute: () => rootRoute,
} as any)

const PromptIndexRoute = PromptIndexImport.update({
  id: '/prompt/',
  path: '/prompt/',
  getParentRoute: () => rootRoute,
} as any)

const HistoryIndexRoute = HistoryIndexImport.update({
  id: '/history/',
  path: '/history/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/history/': {
      id: '/history/'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof HistoryIndexImport
      parentRoute: typeof rootRoute
    }
    '/prompt/': {
      id: '/prompt/'
      path: '/prompt'
      fullPath: '/prompt'
      preLoaderRoute: typeof PromptIndexImport
      parentRoute: typeof rootRoute
    }
    '/templates/': {
      id: '/templates/'
      path: '/templates'
      fullPath: '/templates'
      preLoaderRoute: typeof TemplatesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/history': typeof HistoryIndexRoute
  '/prompt': typeof PromptIndexRoute
  '/templates': typeof TemplatesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/history': typeof HistoryIndexRoute
  '/prompt': typeof PromptIndexRoute
  '/templates': typeof TemplatesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/history/': typeof HistoryIndexRoute
  '/prompt/': typeof PromptIndexRoute
  '/templates/': typeof TemplatesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/history' | '/prompt' | '/templates'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/history' | '/prompt' | '/templates'
  id: '__root__' | '/' | '/history/' | '/prompt/' | '/templates/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HistoryIndexRoute: typeof HistoryIndexRoute
  PromptIndexRoute: typeof PromptIndexRoute
  TemplatesIndexRoute: typeof TemplatesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HistoryIndexRoute: HistoryIndexRoute,
  PromptIndexRoute: PromptIndexRoute,
  TemplatesIndexRoute: TemplatesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/history/",
        "/prompt/",
        "/templates/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/history/": {
      "filePath": "history/index.tsx"
    },
    "/prompt/": {
      "filePath": "prompt/index.tsx"
    },
    "/templates/": {
      "filePath": "templates/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
